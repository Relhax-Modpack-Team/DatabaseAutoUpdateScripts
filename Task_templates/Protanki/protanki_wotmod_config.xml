<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<AutomationSequence documentVersion="1.0">
  <TaskDefinitions>
    <!-- get the current version of the mod by string split and file search -->
    <Task ID="get_source_wotmod_filename" Command="directory_search" DirectoryPath="{working_folder_source}" SearchPattern="{wotmod_name_prefix}*.wotmod" Recursive="False" MacroPrefix="get_wotmod_filename_results"/>
    <Task ID="get_modpack_wotmod_filename" Command="directory_search" DirectoryPath="{working_folder_modpack}" SearchPattern="{wotmod_name_prefix}*.wotmod" Recursive="False" MacroPrefix="get_wotmod_modpack_filename_results"/>
    <Task ID="get_mod_version_1" Command="macro_string_split_filename" MacroName="mod_version_1" Index="1" SplitCharacters="_" FilePath="{get_wotmod_filename_results_0}"/>
    <Task ID="get_mod_version_2" Command="macro_string_split_macro" MacroName="mod_version_2" Index="0" SplitCharacters=".wotmod" InputText="{mod_version_1}"/>

    <!-- compare the hashes. this is done in 3 steps:
      1. write the compare_start task (resets the internal counters for matches and differences)
      2. use compare tasks to compare files on disk or an entry in a zip file
      3. write the compare_end task (evaluates the counts from the compare tasks)
          if compare_end finds 0 differences, then the automation process will end early (nothing to update)

      By using the directory_compare task, if the number of swf's change between the modpack and source, something has changed in the structure and we need to account for it
    -->
    <Task ID="compare_start" Command="compare_start"/>
    <Task ID="compare_wotmod" Command="file_compare" FileA="{get_wotmod_filename_results_0}" FileB="{get_wotmod_modpack_filename_results_0}"/>
    <Task ID="compare_wotmod" Command="file_compare" FileA="{working_folder_source}\{json_source}" FileB="{working_folder_modpack}\{json_modpack}"/>
    <Task ID="compare_end" Command="compare_end"/>

    <!-- if the comparison is good, meaning there is an update, then we want to copy the source into a new 'final' folder and upload -->
    <Task ID="create_source_dir_wotmod_post_compare" Command="create_directory" DirectoryPath="{workDirectory}\package\mods\versiondir"/>
    <Task ID="create_source_dir_json_post_compare" Command="create_directory" DirectoryPath="{workDirectory}\package\mods\configs\protanki"/>
    <Task ID="copy_wotmod_to_package" Command="file_copy" SourceFilePath="{get_wotmod_filename_results_0}" DestinationFilePath="{workDirectory}\package\mods\versiondir\{wotmod_name_prefix}_{mod_version_2}.wotmod"/>
    <Task ID="copy_json_to_package" Command="file_copy" SourceFilePath="{working_folder_source}\{json_source}" DestinationFilePath="{workDirectory}\package\mods\configs\protanki\{json_modpack}"/>

    <!-- update version field in database -->
    <Task ID="update_package_version" Command="update_package_property" PropertyName="Version" PropertyValue="{mod_version_2}" />

    <!-- create the new zip
      "a" is to add to an archive. In this case because it's the first file, the archive is created for the first time.
      -tzip is to create a zip format archive
      -mx=9 is setting the level of compression to 9 (scale goes from 0 [store] to 9[ultra])
      -r recurse subdirectories
      NOTE: this will include everything in the working directory
    -->
    <Task ID="create_zip" Command="shell_exec" Filename="7z.exe" Wd="{workDirectory}\package" Cmd="{7z_createFinalZip}"/>

    <!-- upload to the server -->
    <Task ID="upload_zip" Command="package_upload" FilePath="{workDirectory}\package\final.zip" ZipFileName="{packageName}_v{mod_version_2}_{clientVersion}_{date}.zip"/>
  </TaskDefinitions>
</AutomationSequence>