<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<AutomationSequence documentVersion="1.0">
  <!-- ContourIcons_Pogs_base.xml
    Author:  Willster419
    Created: 2021-08-13
    This sequence template is for comparing the crosshair files arcade, sniper, and crosshairControls (both swfs)
    Required macros:
    {working_folder_modpack}     - the working directory for all operations involving the modpack side of the files
    {working_folder_source}      - the working directory for all operation involving the source side of the files
    {working_folder_package}     - the working directory of the final zip file package created to be uploaded
    {target_package_uid}         - the target package to update the Version property
    {zip_file_name_search}       - part or all of the zip file name to get from MediaFire specific to this zip file (used in {mediafire_xpath_file})
   -->
  <TaskDefinitions>
    <!-- Import the create work dirs macros -->
    <Task ID="import_create_work_dir_tasks" Command="import_task" RepoUrlPath="Task_templates/create_workDirs_macros.xml"/>

    <!-- Create the macro to use for folder search for MediaFire -->
    <Task ID="createmediafire_search_macro" Command="macro_create" MacroName="folder_name_search" MacroValue="{clientVersion}"/>

    <!-- Dynamically get the root folder on MediaFire from the top package -->
    <Task ID="get_download_page_url" Command="retrieve_package_property" PropertyName="DevURLList" TargetPackageUID="{target_package_uid}" MacroSaveName="mediafire_download_folder" PropertyIndex="0"/>

    <!-- Get the MediaFire folder that contains the package we want to download. Note we can set the length and startIndex to -1 and 0 respectivly to effectivly get the entire string -->
    <Task ID="get_folder_url_section" Command="macro_substring_browser" MacroName="mediafire_folder_name" Length="-1" StartIndex="0" Url="{mediafire_download_folder}" HtmlPath="{mediafire_xpath_folder}" WaitTimeMs="500" WaitCounts="6" BrowserHeight="3000" BrowserWidth="0"/>

    <!-- Create the macro to use for the folder that contains the files we want from MediaFire -->
    <Task ID="createmediafire_search_macro" Command="macro_create" MacroName="folder_with_files_mediafire" MacroValue="{mediafire_download_folder}{mediafire_folder_name}"/>

    <!--  Fetch source and ftp  -->
    <Task ID="download_mod_source" Command="download_browser" Url="{folder_with_files_mediafire}" HtmlPath="{mediafire_xpath_file}" DestinationPath="{working_folder_source}\{packageName}_source.zip" WaitTimeMs="500" WaitCounts="6" BrowserHeight="3000" BrowserWidth="0"/>

    <!-- download the modpack current zip file-->
    <Task ID="download_modpack" Command="package_download" FilePath="{working_folder_modpack}\{packageName}_ftp.zip"/>

    <!-- create the path to extract the modpack files -->
    <Task ID="create_final_package_directory_path" Command="create_directory" DirectoryPath="{working_folder_modpack}\contour_icons"/>

    <!-- extract the modpack files -->
    <!-- 'e' means to extract (to the work direcotry, without using the zip file's paths), and -r means to recurse into the zip folder's directories -->
    <Task ID="extract_modpack" Command="shell_exec" Filename="7z.exe" Wd="{working_folder_modpack}" Cmd="e {packageName}_ftp.zip *.png -r -o&quot;{working_folder_modpack}\contour_icons&quot;"/>

    <!-- create the path to extract the source files -->
    <Task ID="create_final_package_directory_path" Command="create_directory" DirectoryPath="{working_folder_package}\zip\res_mods\versiondir\gui\maps\icons\vehicle\contour"/>

    <!-- extract the source files -->
    <!-- 'e' means to extract (to the work direcotry, without using the zip file's paths), and -r means to recurse into the zip folder's directories -->
    <Task ID="extract_source" Command="shell_exec" Filename="7z.exe" Wd="{working_folder_source}" Cmd="e {packageName}_source.zip *.png -r -o&quot;{working_folder_package}\zip\res_mods\versiondir\gui\maps\icons\vehicle\contour&quot;"/>

    <!-- compare the hashes of each of the png files. if the number of files is different, then log it as a needed update -->
    <Task ID="compare_start" Command="compare_start"/>
    <Task ID="compare_contour_icons" Command="directory_compare_count" SearchPattern="*" Recursive="False"
      DirectoryComparePathA="{working_folder_modpack}\contour_icons"
      DirectoryComparePathB="{working_folder_package}\zip\res_mods\versiondir\gui\maps\icons\vehicle\contour"/>
    <Task ID="compare_end" Command="compare_end"/>

    <!-- create the new zip -->
    <Task ID="create_zip" Command="shell_exec" Filename="7z.exe" Wd="{working_folder_package}\zip" Cmd="a -tzip -mx=9 -r final.zip res_mods"/>

    <!-- update version field in database -->
    <Task ID="update_package_version" Command="update_package_property" PropertyName="Version" PropertyValue="{clientVersion}" TargetPackageUID="{target_package_uid}"/>
    <Task ID="update_package_version" Command="update_package_property" PropertyName="Version" PropertyValue="{clientVersion}" TargetPackageUID="this"/>

    <!-- upload to the server -->
    <Task ID="upload_zip" Command="package_upload" FilePath="{working_folder_package}\zip\final.zip" ZipFileName="{packageName}_{clientVersion}_{date}.zip"/>
    </TaskDefinitions>

</AutomationSequence>